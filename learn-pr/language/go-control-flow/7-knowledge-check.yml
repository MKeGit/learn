### YamlMime:ModuleUnit
uid: learn.language.go-control-flow.7-knowledge-check
metadata:
  title: Knowledge check
  description: Knowledge check
  ms.date: 01/25/2023
  author: GitHubber17
  ms.author: chnoring
  ms.topic: unit
  ms.custom: team=nextgen
title: Knowledge check
durationInMinutes: 1
content: |
  Answer these questions to demonstrate what you've learned:
quiz:
  questions:
  - content: "Can variables that are declared within an `if` statement be used outside the `if` statement?"
    choices:
    - content: "Yes, because variables have a global scope."
      isCorrect: false
      explanation: "No, the scope of these variables is only within an `if` block."
    - content: "No, the variable scope is only within the `if` block or nested `if` statements."
      isCorrect: true
      explanation: "Correct. Those variables can't be used outside the `if` block."
    - content: "Yes, as long as they're used within the function."
      isCorrect: false
      explanation: "No, those variables can be used only within the `if` block."
    - content: "No, a variable must be declared outside an `if` statement."
      isCorrect: false
      explanation: "Not necessarily. In Go, a variable doesn't need to be declared before it's used in an `if` block."
  - content: "In a `switch` block, does a `break` keyword need to be included at the end of every `case` statement?"
    choices:
    - content: "No, Go doesn't require you to include the `break` keyword."
      isCorrect: true
      explanation: "Correct. By default, Go stops the `switch` statement when it finishes a `case` block."
    - content: "Yes, otherwise the following `case` statements will be evaluated."
      isCorrect: false
      explanation: "No. By default, Go stops the `switch` statement when it finishes a `case` block."
    - content: "No, Go doesn't support the `break` keyword."
      isCorrect: false
      explanation: "Go does support the `break` statement. But by default, Go stops the `switch` statement when it finishes a `case` block."
  - content: "What does the `panic()` function do in Go?"
    choices:
    - content: "It throws an error that you need to catch. Otherwise, the program crashes without any error."
      isCorrect: false
      explanation: "No, the `panic` function makes the program crash. It prints the error and its details. You don't necessarily have to catch the error to see it."
    - content: "It prints a panic message to the console."
      isCorrect: false
      explanation: "It prints a panic message and also makes the program crash."
    - content: "It crashes a program and prints the error message and its stack trace."
      isCorrect: true
      explanation: "Correct. You can use this function to stop the program and print the error and its details."
