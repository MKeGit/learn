### YamlMime:ModuleUnit
uid: learn.language.go-concurrency.6-knowledge-check
metadata:
  title: Knowledge check
  description: Knowledge check.
  ms.date: 01/23/2023
  author: meaghanlewis
  ms.author: chnoring
  ms.topic: unit
  ms.custom: team=nextgen
title: Knowledge check
durationInMinutes: 2
content: |
  Answer these questions to demonstrate what you've learned:
quiz:
  title: Check your knowledge
  questions:
  - content: "What's the correct syntax to create a goroutine?"
    choices:
    - content: "`func (){}()`"
      isCorrect: false
      explanation: "Incorrect. Use the `go` keyword before the method that you want to execute as a goroutine."
    - content: "`go launch()`"
      isCorrect: true
      explanation: "Correct. Use the `go` keyword before the method that you want to execute as a goroutine."
    - content: "`goroutine launch()`"
      isCorrect: false
      explanation: "Incorrect. Use the `go` keyword before the method that you want to execute as a goroutine."
    - content: "`thread launch()`"
      isCorrect: false
      explanation: "Incorrect. Use the `go` keyword before the method that you want to execute as a goroutine."
  - content: "What's the purpose of using channels in Go?"
    choices:
    - content: "To communicate properly within goroutines and avoid sharing memory for communication purposes."
      isCorrect: true
      explanation: "These reasons are why Go says we don't have to communicate by sharing memory. Instead, we should share memory by communicating."
    - content: "It's just another way of creating goroutines."
      isCorrect: false
      explanation: "Incorrect. You create a goroutine by using the `go` keyword."
    - content: "To send data when doing HTTP calls to another API."
      isCorrect: false
      explanation: "Incorrect. Channels are used for communication purposes among goroutines."
    - content: "To communicate between classes."
      isCorrect: false
      explanation: "Incorrect. Channels help communicate properly within goroutines."
  - content: "What's a particular feature of unbuffered channels?"
    choices:
    - content: "Channels that are dynamic. They can grow as you need automatically."
      isCorrect: false
      explanation: "Incorrect. The main feature from unbuffered channels is that they communicate synchronously. For every piece of data that you send, you need to have a way to receive the message. Otherwise, the program will be blocked."
    - content: "Sending data and receiving data in channels are blocking operations."
      isCorrect: true
      explanation: "Correct. Unbuffered channels communicate synchronously. For every piece of data that you send, you need to have a way to receive the message. Otherwise, the program will be blocked."
    - content: "Channels that you can pass by reference only."
      isCorrect: false
      explanation: "Incorrect. The main feature from unbuffered channels is that they communicate synchronously. For every piece of data that you send, you need to have a way to receive the message. Otherwise, the program will be blocked."  
  - content: "How do you send data to a channel?"
    choices:
    - content: "`ch = \"Hi\"`"
      isCorrect: false
      explanation: "Incorrect. Place the `<-` operator after the channel variable to assign a value."
    - content: "`ch <- \"Hi\"`"
      isCorrect: true
      explanation: "Correct. Place the `<-` operator after the channel variable to assign a value."
    - content: "`send(ch, \"Hi\")`"
      isCorrect: false
      explanation: "Incorrect. Place the `<-` operator after the channel variable to assign a value."
  - content: "How do you receive data from a channel?"
    choices:
    - content: "`res := <- ch`"
      isCorrect: true
      explanation: "Correct. Place the `<-` operator before the channel variable to read its value."
    - content: "`res := get(ch)`"
      isCorrect: false
      explanation: "Incorrect. Place the `<-` operator before the channel variable to read its value."
    - content: "`res := ch<-`"
      isCorrect: false
      explanation: "Incorrect. Place the `<-` operator before the channel variable to read its value."   